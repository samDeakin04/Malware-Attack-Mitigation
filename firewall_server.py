{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "615aa915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Firewall Server\n",
      "[+] HTTP Web Server running on: localhost:8000\n",
      "Blocking request\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [30/Jan/2024 15:50:07] \"POST /tomcatwar.jsp HTTP/1.1\" 403 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Blocking request\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [30/Jan/2024 15:50:09] \"POST /tomcatwar.jsp HTTP/1.1\" 403 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Blocking request\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [30/Jan/2024 15:50:12] \"POST /tomcatwar.jsp HTTP/1.1\" 403 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Blocking request\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [30/Jan/2024 15:50:14] \"POST /tomcatwar.jsp HTTP/1.1\" 403 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Blocking request\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [30/Jan/2024 15:50:16] \"POST /tomcatwar.jsp HTTP/1.1\" 403 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[+] Server terminated. Exiting...\n"
     ]
    }
   ],
   "source": [
    "from http.server import BaseHTTPRequestHandler, HTTPServer\n",
    "\n",
    "host = \"localhost\"\n",
    "port = 8000\n",
    "\n",
    "def block_request(self):\n",
    "    print(\"Blocking request\")\n",
    "    self.send_response(403)\n",
    "    self.send_header(\"content-type\", \"text/plain\")\n",
    "    self.end_headers()\n",
    "    self.wfile.write(bytes(\"Forbidden: Malicious request blocked\", \"utf-8\"))\n",
    "\n",
    "class ServerHandler(BaseHTTPRequestHandler):\n",
    "    def do_GET(self):\n",
    "        self.handle_request()\n",
    "\n",
    "    def do_POST(self):\n",
    "        self.handle_request()\n",
    "\n",
    "    def handle_request(self):\n",
    "        malicious_pattern = \"class.module.classLoader.resources.context.parent.pipeline.first.pattern=\"\n",
    "\n",
    "        # Confirm if the malicious pattern is present in request data\n",
    "        if malicious_pattern in self.path or malicious_pattern in self.requestline:\n",
    "            block_request(self)\n",
    "        else:\n",
    "            # Checking the request method and handle accordingly\n",
    "            if self.command == 'POST':\n",
    "                content_length = int(self.headers.get('Content-Length', 0))\n",
    "                post_data = self.rfile.read(content_length).decode('utf-8')\n",
    "\n",
    "                # Confirming if the malicious pattern is present in the POST data\n",
    "                if malicious_pattern in post_data:\n",
    "                    block_request(self)\n",
    "                    return\n",
    "\n",
    "            self.send_response(200)\n",
    "            self.send_header(\"content-type\", \"application/json\")\n",
    "            self.end_headers()\n",
    "\n",
    "           \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    server = HTTPServer((host, port), ServerHandler)\n",
    "    print(\"[+] Firewall Server\")\n",
    "    print(\"[+] HTTP Web Server running on: %s:%s\" % (host, port))\n",
    "\n",
    "    try:\n",
    "        server.serve_forever()\n",
    "    except KeyboardInterrupt:\n",
    "        pass\n",
    "\n",
    "    server.server_close()\n",
    "    print(\"[+] Server terminated. Exiting...\")\n",
    "    exit(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4aea4d0a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
